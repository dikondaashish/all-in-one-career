// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email        String   @unique
  name         String?
  profileImage String?  // URL to user's profile photo
  theme        Theme?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Usage metrics
  portfolios    Int      @default(0)
  emails        Int      @default(0)
  referrals     Int      @default(0)
  trackerEvents Int      @default(0)

  applications      Application[]
  referralRequests ReferralRequest[]
  portfolioSites   PortfolioSite[]
  logs             Log[]
  searchHistory    SearchHistory[]
  notifications    Notification[]
  atsScans         AtsScan[]
  savedResumes     SavedResume[]
  atsPreferences   AtsUserPreference[]
  ocrJobs          OcrJob[]
}

model JobDescription {
  id        String   @id @default(cuid())
  title     String
  company   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applications Application[]
}

model Application {
  id        String   @id @default(cuid())
  userId    String
  company   String
  role      String
  status    ApplicationStatus @default(SAVED)
  jdId      String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User           @relation(fields: [userId], references: [id])
  jd   JobDescription? @relation(fields: [jdId], references: [id])
}

model ReferralRequest {
  id          String   @id @default(cuid())
  fromUserId  String
  toEmployee  String
  company     String
  role        String
  status      ReferralStatus @default(PENDING)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [fromUserId], references: [id])
}

model PortfolioSite {
  id        String   @id @default(cuid())
  userId    String
  slug      String   @unique
  theme     String
  data      Json
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model SearchHistory {
  id        String   @id @default(uuid())
  query     String
  answer    String?
  userId    String?
  createdAt DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id])
}

enum ApplicationStatus {
  SAVED
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
}

enum ReferralStatus {
  PENDING
  APPROVED
  REJECTED
}

model Log {
  id        String   @id @default(cuid())
  userId    String
  action    String
  message   String?
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  type       String   // FEATURE | SYSTEM | TASK | PROMOTION
  title      String
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  archived   Boolean  @default(false)
  
  user User @relation(fields: [userId], references: [id])
}



enum Theme {
  LIGHT
  DARK
  SYSTEM
}

// ATS Scanner Models
model AtsScan {
  id                    String   @id @default(uuid())
  userId                String
  resumeText            String
  resumeFilename        String?
  resumeFileUrl         String?
  jobDescription        String
  jobTitle              String?
  companyName           String?
  overallScore          Int?
  matchRate             Int?
  searchabilityScore    Int?
  atsCompatibilityScore Int?
  detailedAnalysis      Json?
  missingKeywords       String[]
  foundKeywords         String[]
  recruiterTips         Json?
  improvementSuggestions Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  ocrJobs OcrJob[]
}

model SavedResume {
  id         String   @id @default(uuid())
  userId     String
  resumeName String
  resumeText String?
  fileUrl    String?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model AtsUserPreference {
  id                   String   @id @default(uuid())
  userId               String   @unique
  autoSaveResumes      Boolean  @default(false)
  defaultIndustry      String?
  notificationSettings Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model OcrJob {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scanId          String?  // optional link to ats_scans row
  scan            AtsScan? @relation(fields: [scanId], references: [id], onDelete: SetNull)
  s3Key           String
  status          String   // queued | running | succeeded | failed
  textractJobId   String?
  extractedText   String?
  error           String?
  filename        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([s3Key])
  @@index([status])
}


