// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email        String   @unique
  name         String?
  profileImage String?  // URL to user's profile photo
  theme        Theme?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Usage metrics
  atsScans      Int      @default(0)
  portfolios    Int      @default(0)
  emails        Int      @default(0)
  referrals     Int      @default(0)
  trackerEvents Int      @default(0)

  applications      Application[]
  referralRequests ReferralRequest[]
  portfolioSites   PortfolioSite[]
  logs             Log[]
  searchHistory    SearchHistory[]
  notifications    Notification[]
  atsScansHistory  AtsScan[]
  savedResumes     SavedResume[]
}

model JobDescription {
  id        String   @id @default(cuid())
  title     String
  company   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applications Application[]
}

model Application {
  id        String   @id @default(cuid())
  userId    String
  company   String
  role      String
  status    ApplicationStatus @default(SAVED)
  jdId      String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User           @relation(fields: [userId], references: [id])
  jd   JobDescription? @relation(fields: [jdId], references: [id])
}

model ReferralRequest {
  id          String   @id @default(cuid())
  fromUserId  String
  toEmployee  String
  company     String
  role        String
  status      ReferralStatus @default(PENDING)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [fromUserId], references: [id])
}

model PortfolioSite {
  id        String   @id @default(cuid())
  userId    String
  slug      String   @unique
  theme     String
  data      Json
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model SearchHistory {
  id        String   @id @default(uuid())
  query     String
  answer    String?
  userId    String?
  createdAt DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id])
}

enum ApplicationStatus {
  SAVED
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
}

enum ReferralStatus {
  PENDING
  APPROVED
  REJECTED
}

model Log {
  id        String   @id @default(cuid())
  userId    String
  action    String
  message   String?
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  type       String   // FEATURE | SYSTEM | TASK | PROMOTION
  title      String
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  archived   Boolean  @default(false)
  
  user User @relation(fields: [userId], references: [id])
}

model AtsScan {
  id           String   @id @default(cuid())
  userId       String?
  fileName     String
  fileType     String
  jdText       String?   // optional job description used in comparison
  parsedJson   Json      // structured parsed resume (name, email, phone, education, experience[], skills[])
  matchScore   Int       // 0..100
  missingSkills String[] @default([])
  extraSkills   String[] @default([])
  createdAt    DateTime  @default(now())
  
  user User? @relation(fields: [userId], references: [id])
  keywords AtsKeywordStat[]
}

model AtsKeywordStat {
  id           String   @id @default(cuid())
  scanId       String
  keyword      String
  inResume     Boolean
  inJobDesc    Boolean
  weight       Float    @default(1)
  
  scan AtsScan @relation(fields: [scanId], references: [id], onDelete: Cascade)
  
  @@index([scanId])
}

model SavedResume {
  id        String   @id @default(cuid())
  userId    String
  name      String
  content   String   @db.Text
  filename  String?
  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("saved_resumes")
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}


