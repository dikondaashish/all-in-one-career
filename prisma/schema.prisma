// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email        String   @unique
  name         String?
  profileImage String?  // URL to user's profile photo
  theme        Theme?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Usage metrics
  portfolios    Int      @default(0)
  emails        Int      @default(0)
  referrals     Int      @default(0)
  trackerEvents Int      @default(0)

  applications      Application[]
  referralRequests ReferralRequest[]
  portfolioSites   PortfolioSite[]
  logs             Log[]
  searchHistory    SearchHistory[]
  notifications    Notification[]
  atsScans         AtsScan[]
  atsScansAdvanced AtsScanAdvanced[]
  atsScansAdvancedNew ATSScanAdvanced[]
  savedResumes     SavedResume[]
  atsPreferences   AtsUserPreference[]
  ocrJobs          OcrJob[]
}

model JobDescription {
  id        String   @id @default(cuid())
  title     String
  company   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applications Application[]
}

model Application {
  id        String   @id @default(cuid())
  userId    String
  company   String
  role      String
  status    ApplicationStatus @default(SAVED)
  jdId      String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User           @relation(fields: [userId], references: [id])
  jd   JobDescription? @relation(fields: [jdId], references: [id])
}

model ReferralRequest {
  id          String   @id @default(cuid())
  fromUserId  String
  toEmployee  String
  company     String
  role        String
  status      ReferralStatus @default(PENDING)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [fromUserId], references: [id])
}

model PortfolioSite {
  id        String   @id @default(cuid())
  userId    String
  slug      String   @unique
  theme     String
  data      Json
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model SearchHistory {
  id        String   @id @default(cuid())
  query     String
  answer    String?
  userId    String?
  createdAt DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id])
}

enum ApplicationStatus {
  SAVED
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
}

enum ReferralStatus {
  PENDING
  APPROVED
  REJECTED
}

model Log {
  id        String   @id @default(cuid())
  userId    String
  action    String
  message   String?
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  type       String   // FEATURE | SYSTEM | TASK | PROMOTION
  title      String
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  archived   Boolean  @default(false)
  
  user User @relation(fields: [userId], references: [id])
}



enum Theme {
  LIGHT
  DARK
  SYSTEM
}

// ATS Scanner Models
model AtsScan {
  id                    String   @id @default(cuid())
  userId                String
  resumeText            String
  resumeFilename        String?
  resumeFileUrl         String?
  jobDescription        String
  jobTitle              String?
  companyName           String?
  overallScore          Int?
  matchRate             Int?
  searchabilityScore    Int?
  atsCompatibilityScore Int?
  detailedAnalysis      Json?
  missingKeywords       Json?
  foundKeywords         Json?
  recruiterTips         Json?
  improvementSuggestions Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  ocrJobs OcrJob[]
}

model SavedResume {
  id         String   @id @default(cuid())
  userId     String
  resumeName String
  resumeText String?
  fileUrl    String?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model AtsUserPreference {
  id                   String   @id @default(cuid())
  userId               String   @unique
  autoSaveResumes      Boolean  @default(false)
  defaultIndustry      String?
  notificationSettings Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model OcrJob {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scanId          String?  // optional link to ats_scans row
  scan            AtsScan? @relation(fields: [scanId], references: [id], onDelete: SetNull)
  s3Key           String
  status          String   // queued | running | succeeded | failed
  textractJobId   String?
  extractedText   String?
  error           String?
  filename        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([s3Key])
  @@index([status])
}

// Enhanced Advanced ATS Scanner Models (New Specification)
model ATSScanAdvanced {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeObjectKey    String?  // S3 key for raw resume (optional)
  jdUrl              String?  // optional job URL
  overallScore       Int
  percentile         Int      // market percentile
  atsCompatibility   Json     // detailed ATS checks
  jobTitleMatch      Json     // { exactFound: bool, normalizedMatch: number }
  skills             Json     // { hardFound: string[], hardMissing: string[], softFound: string[], softMissing: string[], impactWeights: Record<string,int> }
  recruiterPsych     Json     // first6s, authorityLanguage, narrative, redFlags: string[]
  marketIntel        Json     // trends, hot/declining, benchmarks
  industryIntel      Json     // detection, confidence, career paths
  companyFit         Json?    // cultureMatch, techStackMatch, rewriteSuggestions[]
  predictions        Json     // hireProbability {prob, ci}, interviewReadiness, salaryPlaybook, xFactor, automationRisk
  strategy           Json     // nextRoles[], skillGaps[], timeline, actions[]
  wordStats          Json     // { wordCount: number, recommendedRange: [min,max] }
  webPresence        Json     // { linkedin: string?, portfolio: string?, github: string? }
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  @@map("ats_scans_advanced_new")
}

// Legacy Advanced ATS Scanner Models (Existing)
model AtsScanAdvanced {
  id                   String   @id @default(cuid())
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic scores (existing)
  overallScore         Int
  matchRate           Int
  searchability       Int
  atsCompatibility    Int
  
  // NEW: Advanced Intelligence
  skillRelevancy      Json     // RevolutionaryScoring.skillRelevancy
  careerTrajectory    Json     // RevolutionaryScoring.careerTrajectory
  impactScore         Json     // RevolutionaryScoring.impactScore
  recruiterAppeal     Json     // RevolutionaryScoring.recruiterAppeal
  redFlags            Json     // RevolutionaryScoring.redFlags
  
  // NEW: Industry Intelligence
  industryDetection   Json     // IndustryIntelligence.industryDetection
  industryScoring     Json     // IndustryIntelligence.industrySpecificScoring
  
  // NEW: Predictions
  hireProbability     Json     // HireProbabilityResult
  interviewReadiness  Json     // Interview prediction data
  salaryNegotiation   Json     // Salary insights
  
  // NEW: Market Intelligence
  marketPosition      Json     // Competitive analysis
  skillDemand         Json     // Current market demand for skills
  
  // Existing fields
  detailedAnalysis    Json?
  hardSkillsFound     Json?
  hardSkillsMissing   Json?
  recruiterTips       Json?
  keywordAnalysis     Json?
  improvementSuggestions Json?
  
  // Original content for reference
  resumeText          String
  jobDescription      String
  companyName         String?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("ats_scans_advanced")
}

model MarketIntelligence {
  id              String   @id @default(cuid())
  industry        String
  skillDemand     Json     // Current demand levels for skills
  salaryTrends    Json     // Salary trend data
  hiringTrends    Json     // Hiring volume and patterns
  lastUpdated     DateTime @default(now())
  
  @@map("market_intelligence")
}

model CompanyProfiles {
  id              String   @id @default(cuid())
  companyName     String   @unique
  domain          String?
  industry        String
  size            String
  cultureKeywords Json     // Company culture indicators
  techStack       Json     // Preferred technologies
  hiringPatterns  Json     // Historical hiring data
  averageTenure   Float?
  lastUpdated     DateTime @default(now())
  
  @@map("company_profiles")
}

model MarketCache {
  id          String   @id @default(cuid())
  industry    String
  payload     Json
  updatedAt   DateTime @default(now())
  @@map("market_cache")
}


