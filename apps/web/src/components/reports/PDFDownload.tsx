/**
 * PDF Download Component - Generate comprehensive ATS report as PDF
 */

import React, { useState } from 'react';
import { Download, FileText, Loader2 } from 'lucide-react';

interface PDFDownloadProps {
  data: {
    overallScoreV2?: any;
    subscoresV2?: any;
    atsChecks?: any;
    skills?: any;
    recruiterPsychology?: any;
    industry?: any;
    market?: any;
    companyOptimization?: any;
    predictive?: any;
    scanId?: string;
    createdAt?: string;
  };
}

export const PDFDownload: React.FC<PDFDownloadProps> = ({ data }) => {
  const [isGenerating, setIsGenerating] = useState(false);

  const generatePDF = async () => {
    setIsGenerating(true);
    
    try {
      // Dynamic import to reduce bundle size
      const { jsPDF } = await import('jspdf');
      const doc = new jsPDF();
      
      let yPosition = 30;
      const pageWidth = doc.internal.pageSize.width;
      const pageHeight = doc.internal.pageSize.height;
      const margin = 25;
      const contentWidth = pageWidth - (margin * 2);
      
      // Color palette (Jobscan-inspired)
      const colors = {
        primary: [64, 139, 234],     // Blue
        secondary: [37, 99, 235],    // Darker Blue
        success: [34, 197, 94],      // Green
        warning: [245, 158, 11],     // Orange
        danger: [239, 68, 68],       // Red
        gray: [107, 114, 128],       // Gray
        lightGray: [243, 244, 246],  // Light Gray
        darkGray: [55, 65, 81],      // Dark Gray
        white: [255, 255, 255]
      };
      
      // Helper function to add professional header
      const addHeader = () => {
        // Header background
        doc.setFillColor(colors.primary[0], colors.primary[1], colors.primary[2]);
        doc.rect(0, 0, pageWidth, 50, 'F');
        
        // Company logo area (placeholder)
        doc.setFillColor(colors.white[0], colors.white[1], colors.white[2]);
        doc.rect(margin, 10, 40, 30, 'F');
        doc.setTextColor(colors.primary[0], colors.primary[1], colors.primary[2]);
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(12);
        doc.text('ATS', margin + 15, 28);
        
        // Header title
        doc.setTextColor(colors.white[0], colors.white[1], colors.white[2]);
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(20);
        doc.text('ATS MATCH REPORT', margin + 50, 25);
        
        // Header subtitle
        doc.setFontSize(12);
        doc.text('Comprehensive Resume Analysis', margin + 50, 35);
        
        yPosition = 70;
      };
      
      // Helper function to add page footer
      const addFooter = () => {
        const footerY = pageHeight - 20;
        doc.setTextColor(colors.gray[0], colors.gray[1], colors.gray[2]);
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(8);
        doc.text('Generated by All-in-One Career ATS Scanner', margin, footerY);
        doc.text('https://all-in-one-career.vercel.app', pageWidth - margin - 50, footerY);
        
        // Page number
        const pageNum = doc.getCurrentPageInfo().pageNumber;
        doc.text(`Page ${pageNum}`, pageWidth / 2, footerY);
      };
      
      // Helper function to check page space and add new page if needed
      const checkPageSpace = (requiredHeight: number) => {
        if (yPosition + requiredHeight > pageHeight - 40) {
          addFooter();
          doc.addPage();
          addHeader();
        }
      };
      
      // Helper function to add section header
      const addSectionHeader = (title: string, color: [number, number, number] = colors.primary) => {
        checkPageSpace(25);
        
        // Section background
        doc.setFillColor(color[0], color[1], color[2]);
        doc.rect(margin, yPosition, contentWidth, 18, 'F');
        
        // Section title
        doc.setTextColor(colors.white[0], colors.white[1], colors.white[2]);
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(14);
        doc.text(title, margin + 10, yPosition + 12);
        
        yPosition += 25;
      };
      
      // Helper function to add text with professional styling
      const addText = (text: string, fontSize: number = 10, isBold: boolean = false, color: [number, number, number] = colors.darkGray, indent: number = 0) => {
        checkPageSpace(fontSize * 1.2);
        
        doc.setFontSize(fontSize);
        doc.setFont('helvetica', isBold ? 'bold' : 'normal');
        doc.setTextColor(color[0], color[1], color[2]);
        
        const lines = doc.splitTextToSize(text, contentWidth - indent);
        
        lines.forEach((line: string, index: number) => {
          if (index > 0) checkPageSpace(fontSize * 1.2);
          doc.text(line, margin + indent, yPosition);
          yPosition += fontSize * 1.2;
        });
        
        yPosition += 3;
      };
      
      // Helper function to add score card
      const addScoreCard = (title: string, score: number, maxScore: number = 100, description?: string) => {
        checkPageSpace(40);
        
        const cardHeight = 35;
        const scoreColor = score >= 80 ? colors.success : score >= 60 ? colors.warning : colors.danger;
        
        // Card background
        doc.setFillColor(colors.lightGray[0], colors.lightGray[1], colors.lightGray[2]);
        doc.rect(margin, yPosition, contentWidth, cardHeight, 'F');
        
        // Score circle background
        doc.setFillColor(scoreColor[0], scoreColor[1], scoreColor[2]);
        doc.circle(margin + 25, yPosition + cardHeight/2, 15, 'F');
        
        // Score number
        doc.setTextColor(colors.white[0], colors.white[1], colors.white[2]);
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(16);
        const scoreText = `${score}`;
        doc.text(scoreText, margin + 25 - (scoreText.length * 3), yPosition + cardHeight/2 + 3);
        
        // Card title
        doc.setTextColor(colors.darkGray[0], colors.darkGray[1], colors.darkGray[2]);
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(12);
        doc.text(title, margin + 50, yPosition + 15);
        
        // Description
        if (description) {
          doc.setFont('helvetica', 'normal');
          doc.setFontSize(9);
          doc.text(description, margin + 50, yPosition + 25);
        }
        
        yPosition += cardHeight + 10;
      };
      
      // Helper function to add metric row
      const addMetricRow = (label: string, value: string, isGood: boolean = true) => {
        checkPageSpace(15);
        
        const statusColor = isGood ? colors.success : colors.danger;
        const statusIcon = isGood ? '✓' : '✗';
        
        // Status icon
        doc.setTextColor(statusColor[0], statusColor[1], statusColor[2]);
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(12);
        doc.text(statusIcon, margin, yPosition);
        
        // Label
        doc.setTextColor(colors.darkGray[0], colors.darkGray[1], colors.darkGray[2]);
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(10);
        doc.text(label, margin + 15, yPosition);
        
        // Value
        doc.setFont('helvetica', 'bold');
        doc.text(value, margin + 120, yPosition);
        
        yPosition += 15;
      };
      
      // Helper function to add bullet list
      const addBulletList = (items: string[], bulletColor: [number, number, number] = colors.primary) => {
        items.forEach(item => {
          checkPageSpace(12);
          
          // Bullet point
          doc.setTextColor(bulletColor[0], bulletColor[1], bulletColor[2]);
          doc.setFont('helvetica', 'bold');
          doc.setFontSize(10);
          doc.text('•', margin + 5, yPosition);
          
          // Item text
          doc.setTextColor(colors.darkGray[0], colors.darkGray[1], colors.darkGray[2]);
          doc.setFont('helvetica', 'normal');
          const lines = doc.splitTextToSize(item, contentWidth - 20);
          
          lines.forEach((line: string, index: number) => {
            if (index > 0) {
              checkPageSpace(12);
              yPosition += 12;
            }
            doc.text(line, margin + 15, yPosition);
          });
          
          yPosition += 15;
        });
      };
      
      // Initialize PDF with professional header
      addHeader();
      
      // Report metadata
      addText(`Report Generated: ${new Date().toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}`, 10, false, colors.gray);
      
      if (data.scanId) {
        addText(`Scan ID: ${data.scanId}`, 10, false, colors.gray);
      }
      
      yPosition += 10;
      
      // === EXECUTIVE SUMMARY ===
      addSectionHeader('EXECUTIVE SUMMARY', colors.primary);
      
      if (data.overallScoreV2) {
        const score = data.overallScoreV2.overall;
        const getScoreLabel = (score: number) => {
          if (score >= 90) return 'Exceptional Match';
          if (score >= 80) return 'Strong Match';
          if (score >= 70) return 'Good Match';
          if (score >= 60) return 'Fair Match';
          return 'Needs Improvement';
        };
        
        const scoreDescription = `Your resume scores ${score}/100 for ATS compatibility and job relevance. Confidence: ${data.overallScoreV2.confidence}% (±${data.overallScoreV2.band} points)`;
        
        addScoreCard('Overall ATS Match Score', score, 100, scoreDescription);
        
        // Score breakdown
        if (data.overallScoreV2.breakdown) {
          addText('Score Breakdown:', 12, true, colors.darkGray);
          yPosition += 5;
          
          const components = [
            { title: 'ATS Foundation', score: Math.round(data.overallScoreV2.breakdown.A || 0), weight: '40%' },
            { title: 'Skills Relevancy', score: Math.round(data.overallScoreV2.breakdown.B || 0), weight: '35%' },
            { title: 'Recruiter Appeal', score: Math.round(data.overallScoreV2.breakdown.C || 0), weight: '10%' },
            { title: 'Market Context', score: Math.round(data.overallScoreV2.breakdown.D || 0), weight: '10%' },
            { title: 'Future Ready', score: Math.round(data.overallScoreV2.breakdown.E || 0), weight: '5%' }
          ];
          
          components.forEach(comp => {
            const isGood = comp.score >= 70;
            addMetricRow(`${comp.title} (${comp.weight})`, `${comp.score}/100`, isGood);
          });
          
          if (data.overallScoreV2.breakdown.redPenalty > 0) {
            yPosition += 5;
            addText(`⚠️ Red Flag Penalty: -${data.overallScoreV2.breakdown.redPenalty?.toFixed(1)} points`, 10, true, colors.danger);
          }
        }
      }
      
      // === ATS FOUNDATION ===
      addSectionHeader('ATS FOUNDATION ANALYSIS', colors.success);
      
      if (data.atsChecks) {
        // File Quality
        addText('File Quality & Format', 12, true, colors.darkGray);
        const fileScore = data.atsChecks.fileTypeOk ? 90 : 60;
        addScoreCard('File Compatibility', fileScore, 100, 'ATS-friendly format and structure');
        
        // Essential Checks
        const checks = [
          { label: 'File Type Compatible', status: data.atsChecks.fileTypeOk },
          { label: 'Professional File Name', status: data.atsChecks.fileNameOk },
          { label: 'Optimal Word Count', status: data.atsChecks.wordCountStatus === 'optimal' },
        ];
        
        if (data.atsChecks.contact) {
          checks.push(
            { label: 'Email Address', status: data.atsChecks.contact.email },
            { label: 'Phone Number', status: data.atsChecks.contact.phone },
            { label: 'Location Information', status: data.atsChecks.contact.location }
          );
        }
        
        if (data.atsChecks.sections) {
          checks.push(
            { label: 'Experience Section', status: data.atsChecks.sections.experience },
            { label: 'Skills Section', status: data.atsChecks.sections.skills },
            { label: 'Education Section', status: data.atsChecks.sections.education }
          );
        }
        
        checks.forEach(check => {
          addMetricRow(check.label, check.status ? 'Present' : 'Missing', check.status);
        });
        
        // Word count details
        if (data.atsChecks.wordCount) {
          yPosition += 5;
          addText(`Word Count: ${data.atsChecks.wordCount} words (${data.atsChecks.wordCountStatus || 'Unknown'})`, 10, false, colors.gray);
        }
        
        // Job title alignment
        if (data.atsChecks.jobTitleMatch) {
          yPosition += 10;
          const similarity = data.atsChecks.jobTitleMatch.normalizedSimilarity ? Math.round(data.atsChecks.jobTitleMatch.normalizedSimilarity * 100) : 0;
          addScoreCard('Job Title Match', similarity, 100, data.atsChecks.jobTitleMatch.exact ? 'Exact match found' : 'Partial match detected');
        }
      }
      
      // === SKILLS ANALYSIS ===
      addSectionHeader('SKILLS ANALYSIS', colors.secondary);
      
      if (data.skills) {
        // Hard Skills Match
        if (data.skills.hard) {
          const foundCount = data.skills.hard.found?.length || 0;
          const missingCount = data.skills.hard.missing?.length || 0;
          const totalSkills = foundCount + missingCount;
          const skillsScore = totalSkills > 0 ? Math.round((foundCount / totalSkills) * 100) : 0;
          
          addScoreCard('Hard Skills Match', skillsScore, 100, `${foundCount} of ${totalSkills} required skills found`);
          
          if (data.skills.hard.found?.length > 0) {
            addText('✓ Skills Found:', 11, true, colors.success);
            const skillsList = data.skills.hard.found.slice(0, 10); // Limit for PDF space
            addBulletList(skillsList, colors.success);
          }
          
          if (data.skills.hard.missing?.length > 0) {
            yPosition += 5;
            addText('✗ Missing Critical Skills:', 11, true, colors.danger);
            const missingList = data.skills.hard.missing.slice(0, 8); // Limit for PDF space
            addBulletList(missingList, colors.danger);
          }
        }
        
        // Soft Skills
        if (data.skills.soft?.found?.length > 0) {
          yPosition += 10;
          addText('Soft Skills Identified:', 11, true, colors.darkGray);
          const softSkillsList = data.skills.soft.found.slice(0, 6);
          addBulletList(softSkillsList, colors.primary);
        }
        
        // Transferable Skills
        if (data.skills.transferable?.length > 0) {
          yPosition += 10;
          addText('Transferable Skills:', 11, true, colors.darkGray);
          const transferableList = data.skills.transferable.slice(0, 5).map((skill: any) => 
            `${skill.from} → ${skill.towards} (${Math.round(skill.confidence * 100)}% match)`
          );
          addBulletList(transferableList, colors.primary);
        }
      }
      
      // === RECRUITER PSYCHOLOGY ===
      addSectionHeader('RECRUITER PSYCHOLOGY', colors.warning);
      
      if (data.recruiterPsychology) {
        // 6-Second Impression
        if (typeof data.recruiterPsychology.sixSecondImpression === 'number') {
          const impression = data.recruiterPsychology.sixSecondImpression;
          addScoreCard('First Impression Score', impression, 100, 'How your resume performs in the critical 6-second scan');
        }
        
        // Narrative Coherence
        if (typeof data.recruiterPsychology.narrativeCoherence === 'number') {
          const coherence = data.recruiterPsychology.narrativeCoherence;
          addScoreCard('Career Narrative', coherence, 100, 'Logical flow and progression of your career story');
        }
        
        // Language Analysis
        if (data.recruiterPsychology.authorityLanguage) {
          yPosition += 5;
          addText('Language Analysis:', 12, true, colors.darkGray);
          
          if (data.recruiterPsychology.authorityLanguage.strong?.length > 0) {
            addText('✓ Strong Action Words Found:', 10, true, colors.success);
            const strongWords = data.recruiterPsychology.authorityLanguage.strong.slice(0, 10);
            addBulletList(strongWords, colors.success);
          }
          
          if (data.recruiterPsychology.authorityLanguage.weak?.length > 0) {
            yPosition += 5;
            addText('⚠ Weak Language to Replace:', 10, true, colors.danger);
            const weakWords = data.recruiterPsychology.authorityLanguage.weak.slice(0, 8);
            addBulletList(weakWords, colors.danger);
          }
        }
        
        // Red Flags
        if (data.recruiterPsychology.redFlags?.length > 0) {
          yPosition += 10;
          addText('⚠ Red Flags Detected:', 12, true, colors.danger);
          const flagsList = data.recruiterPsychology.redFlags.map((flag: string) => 
            flag.replace(/_/g, ' ').toUpperCase()
          );
          addBulletList(flagsList, colors.danger);
        }
      }
      
      // === MARKET INTELLIGENCE ===
      addSectionHeader('MARKET INTELLIGENCE', colors.primary);
      
      if (data.industry) {
        // Market Position
        if (typeof data.industry.marketPercentile === 'number') {
          const percentile = data.industry.marketPercentile;
          addScoreCard('Market Position', percentile, 100, `You rank in the ${percentile}th percentile of candidates`);
        }
        
        // Industry Detection
        if (data.industry.detected?.primary) {
          yPosition += 5;
          addText('Industry Analysis:', 12, true, colors.darkGray);
          addText(`Primary Industry: ${data.industry.detected.primary}`, 10, true, colors.primary);
          
          if (data.industry.detected.secondary?.length > 0) {
            addText(`Secondary: ${data.industry.detected.secondary.join(', ')}`, 10, false, colors.gray);
          }
        }
        
        // Trending Skills
        if (data.industry.trendingSkills?.length > 0) {
          yPosition += 10;
          addText('🔥 Trending Skills in Your Industry:', 11, true, colors.success);
          const trendingList = data.industry.trendingSkills.slice(0, 8);
          addBulletList(trendingList, colors.success);
        }
        
        // Declining Skills
        if (data.industry.decliningSkills?.length > 0) {
          yPosition += 5;
          addText('📉 Declining Skills to Avoid:', 11, true, colors.danger);
          const decliningList = data.industry.decliningSkills.slice(0, 6);
          addBulletList(decliningList, colors.danger);
        }
        
        // Career Paths
        if (data.industry.careerPaths?.length > 0) {
          yPosition += 10;
          addText('Career Progression Paths:', 11, true, colors.darkGray);
          data.industry.careerPaths.slice(0, 3).forEach((path: string[], index: number) => {
            addText(`${index + 1}. ${path.join(' → ')}`, 10, false, colors.primary, 10);
          });
        }
      }
      
      // === PREDICTIVE ANALYSIS ===
      addSectionHeader('PREDICTIVE ANALYSIS', colors.secondary);
      
      if (data.predictive) {
        // Hire Probability
        if (data.predictive.hireProbability) {
          const baseProb = data.predictive.hireProbability.point || 0;
          addScoreCard('Hire Probability', baseProb, 100, 'Likelihood of getting hired based on current profile');
          
          if (data.predictive.hireProbability.xFactor) {
            yPosition += 5;
            addText(`✨ X-Factor Bonus: +${data.predictive.hireProbability.xFactor}%`, 10, true, colors.primary);
          }
        }
        
        // Future-Proofing
        if (typeof data.predictive.automationRisk === 'number') {
          const futureProof = Math.round((1 - data.predictive.automationRisk) * 100);
          addScoreCard('Future-Proof Score', futureProof, 100, 'Resistance to automation and AI disruption');
        }
        
        // Salary Intelligence
        if (data.predictive.salary?.market) {
          yPosition += 10;
          addText('💰 Salary Intelligence:', 12, true, colors.darkGray);
          addText(`Market Rate: $${data.predictive.salary.market.toLocaleString()}`, 10, true, colors.success);
          
          if (data.predictive.salary.range) {
            addText(`Range: $${data.predictive.salary.range.min.toLocaleString()} - $${data.predictive.salary.range.max.toLocaleString()}`, 10, false, colors.gray);
          }
        }
      }
      
      // === IMPROVEMENT RECOMMENDATIONS ===
      addSectionHeader('IMPROVEMENT RECOMMENDATIONS', colors.warning);
      
      // Generate smart improvement suggestions
      const improvements = [];
      
      // Priority improvements based on data
      if (data.atsChecks) {
        if (!data.atsChecks.contact?.email) improvements.push('Add professional email address');
        if (!data.atsChecks.contact?.phone) improvements.push('Include phone number');
        if (!data.atsChecks.sections?.skills) improvements.push('Create dedicated Skills section');
      }
      
      if (data.skills?.hard?.missing?.length > 0) {
        const topMissing = data.skills.hard.missing.slice(0, 3);
        improvements.push(`Add critical skills: ${topMissing.join(', ')}`);
      }
      
      if (data.recruiterPsychology?.sixSecondImpression && data.recruiterPsychology.sixSecondImpression < 70) {
        improvements.push('Improve visual hierarchy and formatting');
      }
      
      if (data.recruiterPsychology?.redFlags?.length > 0) {
        improvements.push('Address resume red flags');
      }
      
      if (data.industry?.trendingSkills?.length > 0) {
        const trending = data.industry.trendingSkills.slice(0, 2);
        improvements.push(`Learn trending skills: ${trending.join(', ')}`);
      }
      
      // Display improvements
      if (improvements.length === 0) {
        addText('🎉 Excellent! Your resume is well-optimized across all areas.', 12, true, colors.success);
        addText('Continue updating with relevant skills and experiences.', 10, false, colors.gray);
      } else {
        addText('Priority Actions to Boost Your Score:', 12, true, colors.darkGray);
        yPosition += 5;
        addBulletList(improvements.slice(0, 8), colors.warning);
      }
      
      // Company optimization (if available)
      if (data.companyOptimization?.enabled) {
        yPosition += 15;
        addSectionHeader('COMPANY-SPECIFIC OPTIMIZATION', colors.primary);
        
        const alignmentScores = [];
        if (data.companyOptimization.cultureAlignment) alignmentScores.push(`Culture: ${data.companyOptimization.cultureAlignment}%`);
        if (data.companyOptimization.techStackMatch) alignmentScores.push(`Tech Stack: ${data.companyOptimization.techStackMatch}%`);
        if (data.companyOptimization.backgroundFit) alignmentScores.push(`Background: ${data.companyOptimization.backgroundFit}%`);
        
        if (alignmentScores.length > 0) {
          addText('Company Alignment Scores:', 11, true, colors.darkGray);
          addBulletList(alignmentScores, colors.primary);
        }
        
        if (data.companyOptimization.recommendations?.length > 0) {
          yPosition += 5;
          addText('Optimization Recommendations:', 11, true, colors.darkGray);
          addBulletList(data.companyOptimization.recommendations.slice(0, 5), colors.primary);
        }
      }
      
      // Final footer
      addFooter();
      
      // Save the PDF with professional naming
      const currentDate = new Date().toISOString().split('T')[0];
      const fileName = `ATS_Match_Report_${data.scanId || 'analysis'}_${currentDate}.pdf`;
      doc.save(fileName);
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <button
      onClick={generatePDF}
      disabled={isGenerating}
      className="inline-flex items-center space-x-2 px-4 py-2 bg-red-600 hover:bg-red-700 disabled:bg-red-400 text-white rounded-lg font-medium transition-colors duration-200 shadow-sm hover:shadow-md"
    >
      {isGenerating ? (
        <Loader2 className="w-5 h-5 animate-spin" />
      ) : (
        <Download className="w-5 h-5" />
      )}
      <span>{isGenerating ? 'Generating PDF...' : 'Download PDF Report'}</span>
    </button>
  );
};


